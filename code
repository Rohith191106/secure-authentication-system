from flask import Flask, request, jsonify
import bcrypt
import jwt
import psycopg2
from config import SECRET_KEY, JWT_ALGORITHM, DATABASE
from datetime import datetime, timedelta

app = Flask(_name_)

# PostgreSQL connection
def get_db_connection():
    return psycopg2.connect(
        host=DATABASE['host'],
        dbname=DATABASE['dbname'],
        user=DATABASE['user'],
        password=DATABASE['password']
    )

# Register new user
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({'error': 'Username and password required'}), 400

    hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("INSERT INTO users (username, password_hash) VALUES (%s, %s)",
                    (username, hashed_pw.decode('utf-8')))
        conn.commit()
        cur.close()
        conn.close()
        return jsonify({'message': 'User registered successfully'}), 201
    except Exception as e:
        return jsonify({'error': 'Username already exists'}), 409

# Authenticate user and return JWT
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    password = data.get('password')

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT password_hash FROM users WHERE username = %s", (username,))
    result = cur.fetchone()
    cur.close()
    conn.close()

    if not result:
        return jsonify({'error': 'Invalid credentials'}), 401

    stored_pw = result[0]
    if bcrypt.checkpw(password.encode('utf-8'), stored_pw.encode('utf-8')):
        payload = {
            'user': username,
            'exp': datetime.utcnow() + timedelta(hours=1)
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm=JWT_ALGORITHM)
        return jsonify({'token': token})
    else:
        return jsonify({'error': 'Invalid credentials'}), 401

# Protected route
@app.route('/protected', methods=['GET'])
def protected():
    auth_header = request.headers.get('Authorization')
    if not auth_header:
        return jsonify({'error': 'Token missing'}), 401

    try:
        token = auth_header.split(" ")[1]
        payload = jwt.decode(token, SECRET_KEY, algorithms=[JWT_ALGORITHM])
        return jsonify({'message': f"Welcome {payload['user']}!"})
    except jwt.ExpiredSignatureError:
        return jsonify({'error': 'Token expired'}), 401
    except jwt.InvalidTokenError:
        return jsonify({'error': 'Invalid token'}), 401

if _name_ == '_main_':
    app.run(debug=True)
